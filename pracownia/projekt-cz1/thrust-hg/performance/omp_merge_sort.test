PREAMBLE = \
    """
    #include <thrust/sort.h>
    #include <thrust/detail/device/omp/detail/stable_merge_sort.h>
    """

INITIALIZE = \
    """
    thrust::host_vector<$KeyType>   h_keys = unittest::random_integers<$KeyType>($InputSize);
    thrust::device_vector<$KeyType> d_keys = h_keys;
    thrust::device_vector<$KeyType> d_keys_copy = d_keys;
    
    // test sort
    thrust::stable_sort(h_keys.begin(), h_keys.end());
    thrust::detail::device::omp::detail::stable_merge_sort(d_keys.begin(), d_keys.end(), thrust::less<$KeyType>());

    ASSERT_EQUAL(d_keys, h_keys);
    """

TIME = \
    """
    thrust::copy(d_keys_copy.begin(), d_keys_copy.end(), d_keys.begin());
    thrust::detail::device::omp::detail::stable_merge_sort(d_keys.begin(), d_keys.end(), thrust::less<$KeyType>());
    """

FINALIZE = \
    """
    RECORD_TIME();
    RECORD_SORTING_RATE(double($InputSize));
    """


KeyTypes   = ['char', 'short', 'int', 'long', 'float', 'double']
InputSizes = [2**N for N in range(18, 25)]

TestVariables = [('KeyType', KeyTypes), ('InputSize', InputSizes)]

